using System.Collections.Generic;
using UnityEngine;

public abstract class Character : MonoBehaviour {
    [Header("Movement & Dodge")]
    [SerializeField] protected float moveSpeed = 5f;
    [SerializeField] protected float sprintMultiplier = 1.5f;
    [SerializeField] protected float dodgeDistance = 5f;
    [SerializeField] protected float dodgeDuration = 0.25f;
    [SerializeField] protected float dodgeCooldown = 1f;

    [Header("Health")]
    [SerializeField] protected int maxHealth = 100;
    protected int currentHealth;

    [Header("Components")]
    [HideInInspector] public Rigidbody2D body;
    [HideInInspector] public Animator animator;

    // State Flags
    [HideInInspector] public bool isDodging = false;
    [HideInInspector] public bool canDodge = true;
    [HideInInspector] public bool isInvincible = false;

    // Inventory & Equipment
    protected List<Item> inventory = new List<Item>();
    protected Dictionary<string, Equipment> equippedItems = new Dictionary<string, Equipment>();

    // Status effects
    protected List<StatusEffect> activeStatusEffects = new List<StatusEffect>();

    // State Machine
    private CharacterState currentState;

    protected virtual void Awake() {
        body = GetComponent<Rigidbody2D>();
        animator = GetComponentInChildren<Animator>();
    }

    protected virtual void Start() {
        currentHealth = maxHealth;
        ChangeState(new CharacterIdleState(this));
    }

    protected virtual void Update() {
        // Update active status effects
        for (int i = activeStatusEffects.Count - 1; i >= 0; i--) {
            effecet.OnUpdate(Time.deltaTime);

            if (effect.IsFinished) {
                effect.OnEnd();
                activeStatusEffects.RemoveAt(i);
            }
        }
        currentState?.Update();
    }

    protected virtual void FixedUpdate() {
        currentState?.FixedUpdate();
    }

    public void ChangeState(CharacterState newState) {
        currentState?.Exit();
        currentState = newState;
        currentState.Enter();
    }

    // Movement
    public void Move(Vector2 direction, bool sprinting = false) {
        if (direction.sqrMagnitude > 0.01f) {
            float speed = moveSpeed * (sprinting ? sprintMultiplier : 1f);
            Vector2 movement = direction.normalized * speed * Time.deltaTime;
            body.MovePosition(body.position + movement);
            animator?.SetBool("IsMoving", true);
        } else {
            animator?.SetBool("IsMoving", false);
        }
    }

    // Invincibility
    public void SetInvincibility(bool value) => isInvincible = value;

    // Damage
    public virtual void TakeDamage(int damageAmount) {
        if (isInvincible) return;

        currentHealth -= damageAmount;
        Debug.Log($"{gameObject.name} took {damageAmount} damage. Current health: {currentHealth}");

        if (currentHealth <= 0) Die();
    }

    protected virtual void Die() {
        Debug.Log($"{gameObject.name} has died.");
        animator?.SetBool("IsDead", true);
    }

    // Abstract methods
    public abstract void Attack();
    public abstract bool AddItem(Item item);
    public abstract bool RemoveItem(Item item);
    public abstract void UseItem(Item item);
    public abstract void EquipItem(Equipment equipment);
    public abstract void UnequipItem(Equipment equipment);
    public abstract bool CanEquip(Equipment equipment);

    public void ApplyStatusEffect(StatusEffect effect) {
        // Check if effect already exists
        StatusEffect existing = activeStatusEffect.Find(e => e.effectName == effect.effectName);

        if (existing != null) {
            if (effect.isStackable) {
                activeStatusEffects.Add(Instantiate(effect)); // new independent instance of effect
            } else if (effect.refreshonReapply) {
                existing.OnApply(this); // refresh timer
            }
            return;
        }

        // Apply new effect
        StatusEffect instance = Instantiate(effect); //duplicate ScriptableObject instance
        instance.OnApply(this);
        activeStatusEffects.Add(instance);
    }
}
