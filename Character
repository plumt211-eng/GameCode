using UnityEngine;

public abstract class Character : MonoBehaviour {
  //Basic movement and health variables
  [SerializeField] protected float moveSpeed = 5f;
  [SerializeField] protected int maxHealth = 100;
  [SerializeField] protected float jumpForce = 10f;
  protected int currentHealth;
  protected bool isGrounded;

  // Dodging variables
  [SerializeField] protected float dodgeDistance = 5f;
  [SerializeField] protected float dodgeDuration = 0.25f;
  [SerializeField] protected float dodgeCooldown = 1f;
  protected bool isDodging = false;
  protected bool canDodge = true;

  // Inventory variables
  protected List<Item> inventory = new List<Item>();
  protected Dictionary<string, Equipment> equippedItems = new Dictionary<string, Equipment>();

  // Inventory abstract methods
  public abstract bool AddItem(Item item);
  public abstract bool RemoveItem(Item item);
  public abstract void UseItem(Item item);

  // Equioment abstract methods
  public abstract void EquipItem(Equipment equipment);
  public abstract void UnequipItem(Equipment equipment);
  public abstract bool CanEquip(Equipment equipment);

  // A reference to the character's Rigidbody, for physics-based movement.
  protected Rigidbody2D body;
  protected Animator animator;

  // Store active status effects.
  protected List<StatusEffect> activeStatusEffects = new List<StatusEffect>();

  protected virtual void Awake() {
    body = GetComponent<Rigidbody2D>();
    animator = GetComponentinChildren<Animator>();
  }

  protected virtual void Start() {
    currentHealth = maxHealth;
  }

  protected virtual void Update() {
    // Update status effects.
    for (int i = activeStatusEffects.Count - 1; i >= 0; i--) {
      activeStatusEffects[i].OnUpdate();
      if (activeStatusEffects[i].IsFinished) {
        activeStatusEffects[i].OnEnd();
        activeStatusEffects.RemoveAt(i);
      }
    }
  }

  public virtual void TakeDamage(int damageAmount) {
    currentHealth -= damageAmount;
    Debug.Log(gameObject.name + " took " + damageAmount + " damage. Current health: " + currentHealth);

    if (currentHealth <=0) {
      Die();
    }
  }

  public abstract void Attack();

  protected virtual void Jump() {
    if (isGrounded) {
      body.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
      animator.SetTrigger("Jump");
      animator.SetBool("IsGrounded", false);
    }
  }

  protected virtual void Dodge(Vector3 direction) {
    if (canDodge && !isDodging) {
      StartCoroutine(DodgeRoutine(direction));
      animator.SetTrigger("Dodge")
    }
  }

  protected IEnumerator DodgeRoutine(Vector3 direction) {
    isDodging = true;
    canDodge = false;

    Vector3 startPosition = body.position;
    Vector3 endPosition = startPosition + direction.normalized * dodgeDistance;

    float elapsedTime = 0f;
    while (elapsedTime < dodgeDuration) {
      body.MovePosition(Vector3.Lerp(startPosition, endPosition, elapsedTime / dodgeDuration));
      elapsedTime += Time.deltaTime;
      yield return null;
    }

    isDodging = false;
    yield return new WaitForSeconds (dodgeCooldown);
    canDodge = true;
  }

  public void ApplyStatusEffect(StatusEffect effect) {
    effect.OnApply(this);
    activeStatusEffect.Add(effect);
  }

  protected virtual void Die() {
    Debug,Log(gameObject.name + " has died.");
    if animator != null) {
      animator.SetBool("IsDead", true);
  }

  protected virtual void OnCollisionEnter(Collision other) {
    if(other.gameObject.CompareTag("Ground")) {
      isGrounded = true;
      animator.SetBool("IsGrounded", true);
    }
  }

  protected virtual void OnCollisionExit(Collision other) {
      if(other.gameObject.CompareTag("Ground")) {
        isGrounded = false;
        animator.SetBool("IsGrounded", false);
    }
  }
}

public abstract class StatusEffect {
  public abstract void OnApply(Character target);
  public abstract void OnUpdate();
  public abstract void OnEnd();
  public bool IsFinished { get; protected set; }
}
